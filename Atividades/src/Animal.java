import javax.naming.Name;

public class Animal {
    public static class cachorro extends Animal {
    }


    public static void main(String[] args) {
        cachorro cachorro1 = new cachorro();
        Animal animal = cachorro1;
        if (animal instanceof cachorro) {
            System.out.println("Is True");
            System.out.println(animal instanceof cachorro);
        }
    }
}

/*
Voc√™ tem raz√£o: no **dia a dia de c√≥digo simples**, a gente quase n√£o v√™ algu√©m escrevendo casting manual entre classes o tempo todo.
Mas em **sistemas maiores** e com **polimorfismo**, isso aparece bastante.

---

        ## üìå Onde *upcasting* e *downcasting* aparecem de verdade

### 1. **Trabalhando com cole√ß√µes gen√©ricas**

Imagine que voc√™ tenha uma lista que guarda v√°rios tipos de animais:

        ```java
List<Animal> animais = new ArrayList<>();
animais.add(new Cachorro());
        animais.add(new Gato());
        ```

        * Aqui voc√™ faz **upcasting** automaticamente, porque a lista aceita `Animal` e voc√™ passa `Cachorro` e `Gato`.
        * Quando for tirar da lista e quiser usar m√©todos espec√≠ficos de `Cachorro`, vai precisar fazer **downcasting**:

        ```java
Cachorro c = (Cachorro) animais.get(0);
c.latir();
```

        ---

        ### 2. **Trabalhando com APIs gen√©ricas**

        * Muitas bibliotecas retornam objetos como o tipo mais gen√©rico poss√≠vel (`Object` ou uma superclasse).
        * Voc√™ precisa fazer **casting** para o tipo real antes de usar.
        Exemplo: m√©todos que retornam `Object` a partir de um Map ou JSON.

---

        ### 3. **Polimorfismo em frameworks**

        * Em frameworks como Spring, Hibernate ou JavaFX, voc√™ recebe um **tipo gen√©rico** (por exemplo `Animal`) e o objeto real s√≥ √© conhecido em tempo de execu√ß√£o.
* O cast serve para acessar comportamentos espec√≠ficos da subclasse.

---

        ### 4. **Implementa√ß√µes gen√©ricas e reaproveitamento de c√≥digo**

        * Um m√©todo pode aceitar um par√¢metro de tipo mais gen√©rico para trabalhar com v√°rias subclasses.
* Internamente, dependendo da l√≥gica, pode haver a necessidade de **converter de volta** para o tipo espec√≠fico.

        ---

        üí° **Resumo da utilidade real**

        > Casting √© √∫til quando voc√™ **trabalha com objetos em um contexto gen√©rico**, mas em algum momento precisa tratar um deles de forma **espec√≠fica**, usando comportamentos que s√≥ existem na subclasse.

---

*/